// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.CompositeBin = (function() {
    function CompositeBin(instanceNameMap) {
      this.add = __bind(this.add, this);
      this.myInstances = instanceNameMap;
      this.getInstance = function(name) {
        return instanceNameMap[name];
      };
      this.setInstance = function(name, value) {
        return instanceNameMap[name] = value;
      };
      this.buildProperties = function(obj) {
        var buildGetter, buildSetter, key, val, _results;
        buildGetter = function(name) {
          return function() {
            return this.getInstance(name);
          };
        };
        buildSetter = function(name) {
          return function(value) {
            return this.setInstance(name, value);
          };
        };
        _results = [];
        for (key in instanceNameMap) {
          val = instanceNameMap[key];
          _results.push(Object.defineProperty(obj, key, {
            get: buildGetter(key),
            set: buildSetter(key),
            enumerable: true,
            configurable: true
          }));
        }
        return _results;
      };
      this.buildProperties(this);
    }

    CompositeBin.prototype.add = function(map) {
      var key, val, _results;
      _results = [];
      for (key in map) {
        val = map[key];
        _results.push(Object.defineProperty(this, key, {
          get: function() {
            return val;
          },
          set: function(newVal) {
            return val = newVal;
          },
          enumerable: true,
          configurable: true
        }));
      }
      return _results;
    };

    CompositeBin.prototype.remove = function(propName) {
      return delete this[propName];
    };

    CompositeBin.prototype.removeAll = function() {
      var key, val, _ref, _results;
      _ref = this.myInstances;
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        _results.push(delete this[key]);
      }
      return _results;
    };

    CompositeBin.prototype.hasADFS = function(className, obj) {
      var key, val;
      if (obj === null || !obj instanceof Object) {
        return false;
      }
      for (key in obj) {
        val = obj[key];
        if (val === null || _.isFunction(val) || !_.isObject(val)) {
          continue;
        }
        if (val instanceof className) {
          console.log('hasADFS found ' + className + ' in ' + key);
          return true;
        } else if (!(val instanceof className) && val instanceof Object) {
          console.log("key: " + key + " recursing val");
          if (!this.hasADFS(className, val)) {
            continue;
          } else {
            return true;
          }
        }
      }
      return false;
    };

    CompositeBin.prototype.hasA = function(className, recurse) {
      var key, val, _ref;
      if (arguments[1] === void 0 || arguments[1] === false) {
        _ref = this.myInstances;
        for (key in _ref) {
          val = _ref[key];
          if (val === null || _.isFunction(val)) {
            continue;
          }
          if (val instanceof className) {
            return true;
          }
        }
      } else {
        return this.hasADFS(className, this.myInstances);
      }
      return false;
    };

    CompositeBin.prototype.hasPtr = function(ptrName) {
      if (this.myInstances[ptrName] === null) {
        return false;
      } else {
        return true;
      }
    };

    return CompositeBin;

  })();

  window.CompositeModel = (function(_super) {
    __extends(CompositeModel, _super);

    function CompositeModel(attributes, options) {
      this.__ = new CompositeBin(options);
      Backbone.Model.apply(this, arguments);
    }

    return CompositeModel;

  })(Backbone.Model);

  Backbone.SF = {};

  Backbone.SF.CompositeModel = window.CompositeModel;

}).call(this);
